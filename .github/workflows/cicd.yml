name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  test-django:
    runs-on: ubuntu-latest
    name: Tests for Django backend app
    strategy:
      max-parallel: 4

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./WMIAdventure/backend/requirements.txt
    - name: Run Django tests
      run: |
        python ./WMIAdventure/backend/WMIAdventure_backend/manage.py test ./WMIAdventure/backend/WMIAdventure_backend/

  test-frontend:
  
    runs-on: ubuntu-latest
    name: Tests for React frontend app
    strategy:
      max-parallel: 4
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: WMIAdventure/frontend/package-lock.json
    - name: Install JS dependencies
      run: |
        cd ./WMIAdventure/frontend
        npm install 
    - name: Test
      run: |
        cd ./WMIAdventure/frontend
        npm run test -- --passWithNoTests

  build:
    runs-on: ubuntu-latest
    needs: [test-django, test-frontend]
    name: Build containers
    env:
      ACR_SERVER: wmiadv.azurecr.io
      SERVER_IP: wmiadventure-dev.germanywestcentral.cloudapp.azure.com
      DB_ADDR: wmiadventure-dev.germanywestcentral.cloudapp.azure.com
    steps:
    - uses: actions/checkout@v2

    - name: Docker compose build and push to ACR
      run: |
        docker login -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }} ${{ env.ACR_SERVER }}
        cd ./WMIAdventure/
        docker-compose -f docker-compose-dev.yml build --build-arg API_URL=${{ env.SERVER_IP }}:8000 --build-arg DB_PASSWD=${{ secrets.DB_PASSWD }} --build-arg DB_PORT=5432 --build-arg DJANGO_SECRET=${{ secrets.DJANGO_SECRET_KEY }} --build-arg DB_NAME=wmiadventure --build-arg DJANGO_DEBUG=False --build-arg HTTPS_BACKEND=1
        docker push ${{ env.ACR_SERVER }}/wmiadventure:dev
        docker push ${{ env.ACR_SERVER }}/frontend:dev
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    name: Deploy containers to dev
    env:
      SERVER_IP: wmiadventure-dev.germanywestcentral.cloudapp.azure.com
      SERVER_USERNAME: wmiadventure
      ACR_SERVER: wmiadv.azurecr.io
    steps:
    - uses: actions/checkout@v2

    - name: Pull images
      uses: garygrossgarten/github-action-ssh@release
      with:
        command: docker login -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }} ${{ env.ACR_SERVER }}; docker pull ${{ env.ACR_SERVER }}/wmiadventure:dev; docker pull ${{ env.ACR_SERVER }}/frontend:dev
        host: ${{ env.SERVER_IP }}
        username: ${{ env.SERVER_USERNAME }}
        privateKey: ${{ secrets.SERVER_KEY }}

    - name: Stop Django server and Migrate DB
      uses: garygrossgarten/github-action-ssh@release
      with:
        command:
          docker container stop wmi-adventure; docker container rm wmi-adventure; docker image prune -f; docker run --rm --entrypoint python ${{ env.ACR_SERVER }}/wmiadventure:dev manage.py migrate
        host: ${{ env.SERVER_IP }}
        username: ${{ env.SERVER_USERNAME }}
        privateKey: ${{ secrets.SERVER_KEY }}


    - name: Run Django server
      uses: garygrossgarten/github-action-ssh@release
      with:
        command: cd ~/WMIAdventure/WMIAdventure; docker run -d --name=wmi-adventure -p 8000:8000 --mount type=bind,source="$(pwd)"/certbot/conf,target=/etc/letsencrypt --mount type=bind,source="$(pwd)"/certbot/www,target=/var/www/certbot ${{ env.ACR_SERVER }}/wmiadventure:dev
        host: ${{ env.SERVER_IP }}
        username: ${{ env.SERVER_USERNAME }}
        privateKey: ${{ secrets.SERVER_KEY }}
        

    - name: Run frontend nginx
      uses: garygrossgarten/github-action-ssh@release
      with:
        command: cd ~/WMIAdventure/WMIAdventure; docker container stop wmi-adventure-frontend; docker container rm wmi-adventure-frontend; docker image prune -f; docker run -p 80:80 -p 443:443 --mount type=bind,source="$(pwd)"/certbot/conf,target=/etc/letsencrypt --mount type=bind,source="$(pwd)"/certbot/www,target=/var/www/certbot -d --name=wmi-adventure-frontend ${{ env.ACR_SERVER }}/frontend:dev;
        host: ${{ env.SERVER_IP }}
        username: ${{ env.SERVER_USERNAME }}
        privateKey: ${{ secrets.SERVER_KEY  }}
